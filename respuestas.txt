18.Escriba el programa que muestra por la consola la frase
"Hola Mundo". ¿Qué significado tiene la salida? (puts ’Hola Mundo’)
-El comando puts te muestra por pantalla lo escrito a continuación y como no devuelve nada te devuelve un nil.

21.¿Qué diferencia hay entre"\t\n" y ’\t\n’?
-Con las dobles comillas ("") pone directamente el espacio y salto de linea, y con las comillas simples ('') te escribe porpantalla \t\n.

22.¿Cómo funciona %q? ¿Qué es %q{hello world\n}?¿Qué es %q{’a’ ’b’ ’c’}?
-La q funciona como las comillas simples.

23.¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}?¿Qué es %Q{’a’ ’b’ ’c’}?
-La Q funciona como las comillas dobles.

24.¿Qué queda en c?
-En c se almacena la sentencia con los valores de a y b: "--4--\n--2--\n"

25.¿Qué queda en c?
-En c se almacena la sentencia literalmente: "--\#{a}--\n--\#{b}--\n"

26.¿Cuál es el valor de las siguientes expresiones?

s[0,2] = "he"
s[-1,1]= "o"
s[0,10]= "hello"

27.¿Qué queda en g?
- "helloworld"

28.¿Qué queda en e?
- "..."

29.¿Cual es el resultado?
-"2 2 2"

30.¿Qué es esto? %w[this is a test]
-Te muestra cada palabra de la frase separadas por comillas

31.¿Qué es esto? %w[\t \n]

32.¿Qué es esto? %W[\t \n]

33.¿Qué contiene nils? nils = Array.new(3)
- [nil, nil, nil]

34. ¿Qué contiene zeros? zeros = Array.new(3, 0)
-[0, 0, 0]

35. ¿Qué queda en b?
-[[1, 2], [3, 4]]

36.¿Què queda en c?
-[0, 2, 4]

37.¿Cuál es el resultado de cada una de estas operaciones?

>>a[1,1]
=> ["b"]
>> a[-2,2]
=> ["d", "e"]
>> a[0..2]
=> ["a", "b", "c"]
>> a[0...1]
=> ["a"]
>> a[-2..-1]
=> ["d", "e"]

38.¿Cuál es el resultado de cada una de estas operaciones?
>> a
=> ["a", "b", "c", "d", "e"]
>> a[0,2] = %w{A B}
=> ["A", "B"]
>> a
=>["A", "B", "c", "d", "e"]
>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
>> a
=>["A", "B", "C", "D", "E"]
>> a[0,0] = [1,2,3]
=> [1, 2, 3]
>> a
=> [1, 2, 3, "A", "B", "C", "D", "E"]
>> a[0,2] = []
=> []
>> a
=>[3, "A", "B", "C", "D", "E"]
>> a[-1,1] = [ ’Z’ ]
=> ["Z"]
>> a
=>[3, "A", "B", "C", "D", "Z"]
>> a[-2,2] = nil
=> nil
>> a
=>[3, "A", "B", "C"]

39.¿Cuál es el resultado de cada una de estas operaciones?

>> a = (1...4).to_a
=> [1, 2, 3]
>> a = a + [4, 5]
=> [1, 2, 3, 4, 5]
>> a += [[6, 7, 8]]
=> [1, 2, 3, 4, 5, [6, 7, 8]]

40.¿Cuál es el resultado de cada una de estas operaciones?

>> x = %w{a b c b a}
=> ["a", "b", "c", "b", "a"]
>> x = x - %w{b c d}
=> ["a", "a"]

41.¿Cuál es el resultado de cada una de estas operaciones?

>> z = [0]*8
=>[0, 0, 0, 0, 0, 0, 0, 0]

42.¿Cuál es el resultado de cada una de estas operaciones?

>> a = []
=> []
>> a << 1
=> [1]
>> a << 2 << 3
=> [1, 2, 3]
>> a << [4, 5, 6]
=> [1, 2, 3, [4, 5, 6]]
>> a.concat [7, 8]
=> [1, 2, 3, [4, 5, 6], 7, 8]

43.¿Cuál es el resultado de cada una de estas operaciones?

>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
>> c = a | b
=> [1, 2, 3, 4, 5]
>> d = b | a
=> [5, 4, 3, 2, 1]
>> e = a & b
=> [2, 3, 4]
>> f = b & a
=> [4, 3, 2]

44.¿Qué resultados dan las siguientes operaciones?

>> a = 1..10
=> 1..10
>> a.class
=> Range
>> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>> b = 1...10
=> 1....10
>> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]
>> b.include? 10
=> false
>> b.include? 8
=> true
>> b.step(2) {|x| print "#{x} " }
1 3 5 7 9 => 1...10
>> 1..3.to_a

45. ¿Qué resultados dan las siguientes operaciones?

>> r = 0...100
=> 0....100
>> r.member? 50
=> true
>> r.include? 99.9
=> true
>> r.member? 99.9
=> true

46. ¿Qué resultados dan las siguientes operaciones?

>> true.class
=> TrueClass
>> false.class
=> FalseClass
>> puts "hello" if 0
hello
=> nil
>> puts "hello" if nil
=> nil
>> puts "hello" if ""
(irb):42: warning: string literal in condition
hello
=> nil

47. ¿Què resultados dan las siguientes operaciones?

>> x = :sym
=> :sym
>> x.class
=> Symbol
>> x == ’sym’
=> false
>> x == :sym
=> true
>> z = :’a long symbol’
=> :"a long symbol"
>> z.class
=> Symbol
>> x == ’sym’.to_sym
=> true
>> x.to_s == ’sym’
=> true

48. ¿Qué resultados se dan?

>> s = "Ruby"
=> "Ruby"
>> t = s
=> "Ruby"
>> t[-1] = ""
=> ""
>> print s
Rub=> nil
>> t = "Java"
=> "Java"
>> print s, t
Rubjava=> nil

49. ¿Cuál es el resultado?

>> "%d %s" % [3, "rubies"]
=> "3 rubies"

50. ¿Cuáles son los resultados?

>> x, y = 4, 5
=> [4, 5]
>> z = x > y ? x : y
=> 5
>> x,y,z = [1,2,3]
=> [1, 2, 3]

51. ¿Qué resultados dan las siguientes operaciones?

>> x = { :a => 1, :b => 2 }
=> {:b=>2, :a=>1}
>> x.keys
=> [:b, :a]
>> x.values
=> [2, 1]
>> x[:c] = 3
=> 3
>> x
=> {:b=>2, :c=>3, :a=>1}
>> x.delete(’a’)
=> nil
>> x
=> {:b=>2, :c=>3, :a=>1}
>> x.delete(:a)
=> 1
>> x
=> {:b=>2, :c=>3, :a=>1}
>> x = { :a => 1, :b => 2, :c => 4 }
=> {:b=>2, :c=>4, :a=>1}
>> x.delete_if { |k,v| v % 2 == 0 }
=> {:a=>1}
>> x
=> {:a=>1}

52. ¿Qué hace yield 4, 5?


53. ¿Qué hace la siguiente sentencia? counts = Hash.new(0) ¿Qué diferencia hay con la asignación counts = {}?

54. ¿Qué retorna esta expresión? ’hello world, hello LPP’.scan /\w+/

=> ["hello", "world", "hello", "LPP"]

55. Explique que hacen estas sentencias:

c = { :a => 3, :b => 2, :c => 1 }  //Almacena en "c" lo de dentro de las llaves
c.keys.sort.each { |k| puts c[k] }










